<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".js" #>
({
    appDir: '<#= relativeBaseUrl #>',
    baseUrl: './',
    mainConfigFile: '<#= relativeBaseUrl #>/config.js',
    dir: '../release',
    optimize: 'uglify2',
    uglify2: {
        output: {
            beautify: false
        }
    },
    modules: [
                { name: 'shared'},
        <# foreach(string path in GetViewFiles()){ #>
        { name: '<#= GetRequireJSName(path) #>'},
        <# } #>
    ],
    onBuildRead: function(moduleName, path, contents) {
        if (moduleName === "config") {
            return contents.replace("/Public/js", "/Public/release");
        }
        return contents;
    },
    // to exclude all text! files set to false
    inlineText: true
})

<#+
    public const string relativeBaseUrl = "../js";
 
    public string GetRequireJSName(string path){
        var relativePath = Path.GetFullPath(path).Replace(Path.GetFullPath(this.Host.ResolvePath("..\\js\\")), "");
        return Path.Combine(Path.GetDirectoryName(relativePath), Path.GetFileNameWithoutExtension(relativePath)).Replace("\\", "/");
    } 

    public string[] GetViewFiles(){
        string viewsPath = this.Host.ResolvePath(relativeBaseUrl+"/views");
        string searchPattern = "*.js";
        return System.IO.Directory.GetFiles(viewsPath, searchPattern, System.IO.SearchOption.AllDirectories);
    }
#>
