@model IEnumerable<MvcMovie.Models.Article>

@Styles.Render("http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css")

@section scripts {
    @* Delete dialog *@
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script type="text/javascript" src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>

    @* creation, editition and deletion is available only when user is authenticated *@
    @if (Request.IsAuthenticated)
    {
        // replace the create button by the editor and set focus
        <script type="text/javascript">
            $("#create-button").click(function () {
                $(this).replaceWith("<div class='editable' id='newArticle'>Text eingeben...</div>");
                tinymce.init({
                    selector: "#newArticle",
                    inline: true,
                    plugins: [
                        "save advlist autolink lists link image charmap print preview anchor"
                    ],
                    toolbar: "save insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright"
                });
                $('#newArticle').focus().select();
            });
        </script>
        
        // editor definition for present articles
        <script type="text/javascript" src="//tinymce.cachefly.net/4.0/tinymce.min.js"></script>
        <script type="text/javascript">
            tinymce.init({
                selector: "div.editable",
                inline: true,
                plugins: [
                    "save advlist autolink lists link image charmap print preview anchor"
                ],
                toolbar: "save insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright"
            });
        </script>
    }
}

@* If current user is authenticated he should be able to create, edit and delete new articles *@
@if (Request.IsAuthenticated)
{
    // creation form , that will be replaced by the editor on click
    using (Html.BeginForm("Create", "Article", FormMethod.Post))
    {
    <button type="button" id="create-button">Neu</button>
    }

    // each article has its own editor in the form
    foreach (var item in Model)
    {
        using (Html.BeginForm("Edit", "Article", FormMethod.Post))
        {
    <div class="editable" style="background-color: white; border-style: solid; border-width: 1px  1px 6px 1px; border-color: rgba(0, 0, 0, 0.2); padding: 20px; margin: 20px">
        @Html.Raw(item.Content)
    </div>   
    @Html.Hidden("edit" + item.ID, item.ID)
        }

        // form for deletion
        using (Html.BeginForm("Delete", "Article", FormMethod.Post))
        {
    @Html.Hidden("delete" + item.ID, item.ID)
    <button type="submit">Löschen</button>
        }
    }
}
else // if user is not authenticated all articles are read only
{
    // render all articles
    foreach (var item in Model)
    {
    <div style="background-color: white; border-style: solid; border-width: 1px  1px 6px 1px; border-color: rgba(0, 0, 0, 0.2); padding: 20px; margin: 20px">
        @Html.Raw(item.Content)
    </div>
    }
}